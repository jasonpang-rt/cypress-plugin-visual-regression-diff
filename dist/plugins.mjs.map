{"version":3,"file":"plugins.mjs","sources":["../src/constants.ts","../node_modules/truncate-utf8-bytes/lib/truncate.js","../node_modules/truncate-utf8-bytes/index.js","../node_modules/sanitize-filename/index.js","../src/screenshotPath.utils.ts","../src/image.utils.ts","../src/task.hook.ts","../src/afterScreenshot.hook.ts","../src/plugins.ts"],"sourcesContent":["const PLUGIN_NAME = \"cp-visual-regression-diff\";\nexport const LINK_PREFIX = `#${PLUGIN_NAME}-`;\nexport const OVERLAY_CLASS = `${PLUGIN_NAME}-overlay`;\nexport const IMAGE_SNAPSHOT_PREFIX = `__${PLUGIN_NAME}_snapshots__`;\n\nexport enum FILE_SUFFIX {\n  diff = \".diff\",\n  actual = \".actual\",\n}\n\nexport const TASK = {\n  getScreenshotPathInfo: `${PLUGIN_NAME}-getScreenshotPathInfo`,\n  compareImages: `${PLUGIN_NAME}-compareImages`,\n  approveImage: `${PLUGIN_NAME}-approveImage`,\n  cleanupImages: `${PLUGIN_NAME}-cleanupImages`,\n  doesFileExist: `${PLUGIN_NAME}-doesFileExist`,\n  /* c8 ignore next */\n};\n\nexport const PATH_VARIABLES = {\n  specPath: \"{spec_path}\",\n  unixSystemRootPath: \"{unix_system_root_path}\",\n  winSystemRootPath: \"{win_system_root_path}\",\n} as const;\n\nexport const WINDOWS_LIKE_DRIVE_REGEX = /^[A-Z]:$/;\n\nexport const METADATA_KEY = \"FRSOURCE_CPVRD_V\";\n","'use strict';\n\nfunction isHighSurrogate(codePoint) {\n  return codePoint >= 0xd800 && codePoint <= 0xdbff;\n}\n\nfunction isLowSurrogate(codePoint) {\n  return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n}\n\n// Truncate string by size in bytes\nmodule.exports = function truncate(getLength, string, byteLength) {\n  if (typeof string !== \"string\") {\n    throw new Error(\"Input must be string\");\n  }\n\n  var charLength = string.length;\n  var curByteLength = 0;\n  var codePoint;\n  var segment;\n\n  for (var i = 0; i < charLength; i += 1) {\n    codePoint = string.charCodeAt(i);\n    segment = string[i];\n\n    if (isHighSurrogate(codePoint) && isLowSurrogate(string.charCodeAt(i + 1))) {\n      i += 1;\n      segment += string[i];\n    }\n\n    curByteLength += getLength(segment);\n\n    if (curByteLength === byteLength) {\n      return string.slice(0, i + 1);\n    }\n    else if (curByteLength > byteLength) {\n      return string.slice(0, i - segment.length + 1);\n    }\n  }\n\n  return string;\n};\n\n","'use strict';\n\nvar truncate = require(\"./lib/truncate\");\nvar getLength = Buffer.byteLength.bind(Buffer);\nmodule.exports = truncate.bind(null, getLength);\n","/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n","import path from \"path\";\nimport {\n  FILE_SUFFIX,\n  IMAGE_SNAPSHOT_PREFIX,\n  PATH_VARIABLES,\n  WINDOWS_LIKE_DRIVE_REGEX,\n} from \"./constants\";\nimport sanitize from \"sanitize-filename\";\n\nconst nameCacheCounter: Record<string, number> = {};\nconst lastRetryNameCacheCounter: Record<string, number> = {};\nlet lastRetryNumber = 0;\n\nconst resetMap = (map: Record<string, unknown>) => {\n  for (const key in map) delete map[key];\n};\n\nexport const generateScreenshotPath = ({\n  titleFromOptions,\n  imagesPath,\n  specPath,\n  currentRetryNumber,\n}: {\n  titleFromOptions: string;\n  imagesPath: string;\n  specPath: string;\n  currentRetryNumber: number;\n}) => {\n  const parsePathPartVariables = (pathPart: string, i: number) => {\n    if (pathPart === PATH_VARIABLES.specPath) {\n      return path.dirname(specPath);\n    } else if (i === 0 && !pathPart) {\n      // when unix-like absolute path\n      return PATH_VARIABLES.unixSystemRootPath;\n    } else if (i === 0 && WINDOWS_LIKE_DRIVE_REGEX.test(pathPart)) {\n      // when win-like absolute path\n      return path.join(PATH_VARIABLES.winSystemRootPath, pathPart[0]);\n    }\n\n    return pathPart;\n  };\n\n  const screenshotPath = path.join(\n    ...imagesPath.split(\"/\").map(parsePathPartVariables),\n    sanitize(titleFromOptions)\n  );\n\n  if (typeof nameCacheCounter[screenshotPath] === \"undefined\") {\n    nameCacheCounter[screenshotPath] = -1;\n  }\n\n  // it's a retry of last test, so let's reset the counter to value before last retry\n  if (currentRetryNumber > lastRetryNumber) {\n    // +1 because we index screenshots starting at 0\n    for (const screenshotPath in lastRetryNameCacheCounter)\n      nameCacheCounter[screenshotPath] -=\n        lastRetryNameCacheCounter[screenshotPath] + 1;\n  }\n\n  resetMap(lastRetryNameCacheCounter);\n\n  lastRetryNumber = currentRetryNumber;\n  lastRetryNameCacheCounter[screenshotPath] = ++nameCacheCounter[\n    screenshotPath\n  ];\n\n  return path.join(\n    IMAGE_SNAPSHOT_PREFIX,\n    `${screenshotPath} #${nameCacheCounter[screenshotPath]}${FILE_SUFFIX.actual}.png`\n  );\n};\n\nconst screenshotPathRegex = new RegExp(\n  `^([\\\\s\\\\S]+?) #([0-9]+)(?:(?:\\\\${FILE_SUFFIX.diff})|(?:\\\\${FILE_SUFFIX.actual}))?\\\\.(?:png|PNG)$`\n);\nexport const wasScreenshotUsed = (imagePath: string) => {\n  const matched = imagePath.match(screenshotPathRegex);\n  /* c8 ignore next */ if (!matched) return false;\n  const [, screenshotPath, numString] = matched;\n  const num = parseInt(numString);\n  /* c8 ignore next */ if (!screenshotPath || isNaN(num)) return false;\n  return (\n    screenshotPath in nameCacheCounter &&\n    num <= nameCacheCounter[screenshotPath]\n  );\n};\n\nexport const resetScreenshotNameCache = () => {\n  lastRetryNumber = 0;\n  resetMap(nameCacheCounter);\n  resetMap(lastRetryNameCacheCounter);\n};\n","import path from \"path\";\nimport fs from \"fs\";\nimport { PNG, PNGWithMetadata } from \"pngjs\";\nimport sharp from \"sharp\";\nimport { addMetadata, getMetadata } from \"meta-png\";\nimport glob from \"glob\";\nimport { version } from \"../package.json\";\nimport { wasScreenshotUsed } from \"./screenshotPath.utils\";\nimport { METADATA_KEY } from \"./constants\";\n\nexport const addPNGMetadata = (png: Buffer) =>\n  addMetadata(png, METADATA_KEY, version /* c8 ignore next */);\nexport const getPNGMetadata = (png: Buffer) =>\n  getMetadata(png, METADATA_KEY /* c8 ignore next */);\nexport const isImageCurrentVersion = (png: Buffer) =>\n  getPNGMetadata(png) === version;\nexport const isImageGeneratedByPlugin = (png: Buffer) =>\n  !!getPNGMetadata(png /* c8 ignore next */);\n\nexport const writePNG = (name: string, png: PNG | Buffer) =>\n  fs.writeFileSync(\n    name,\n    addPNGMetadata(png instanceof PNG ? PNG.sync.write(png) : png)\n  );\n\nconst inArea = (x: number, y: number, height: number, width: number) =>\n  y > height || x > width;\n\nexport const fillSizeDifference = (\n  image: PNG,\n  width: number,\n  height: number\n) => {\n  for (let y = 0; y < image.height; y++) {\n    for (let x = 0; x < image.width; x++) {\n      if (inArea(x, y, height, width)) {\n        const idx = (image.width * y + x) << 2;\n        image.data[idx] = 0;\n        image.data[idx + 1] = 0;\n        image.data[idx + 2] = 0;\n        image.data[idx + 3] = 64;\n      }\n    }\n  }\n  return image;\n  /* c8 ignore next */\n};\n\nexport const createImageResizer =\n  (width: number, height: number) => (source: PNG) => {\n    const resized = new PNG({ width, height, fill: true });\n    PNG.bitblt(source, resized, 0, 0, source.width, source.height, 0, 0);\n    return resized;\n    /* c8 ignore next */\n  };\n\nexport const scaleImageAndWrite = async ({\n  scaleFactor,\n  path,\n}: {\n  scaleFactor: number;\n  path: string;\n}) => {\n  const imgBuffer = fs.readFileSync(path);\n  if (scaleFactor === 1) return imgBuffer;\n\n  const rawImgNew = PNG.sync.read(imgBuffer);\n  const newImageWidth = Math.ceil(rawImgNew.width * scaleFactor);\n  const newImageHeight = Math.ceil(rawImgNew.height * scaleFactor);\n  await sharp(imgBuffer).resize(newImageWidth, newImageHeight).toFile(path);\n\n  return fs.readFileSync(path);\n};\n\nexport const alignImagesToSameSize = (\n  firstImage: PNGWithMetadata,\n  secondImage: PNGWithMetadata\n) => {\n  const firstImageWidth = firstImage.width;\n  const firstImageHeight = firstImage.height;\n  const secondImageWidth = secondImage.width;\n  const secondImageHeight = secondImage.height;\n\n  const resizeToSameSize = createImageResizer(\n    Math.max(firstImageWidth, secondImageWidth),\n    Math.max(firstImageHeight, secondImageHeight)\n  );\n\n  const resizedFirst = resizeToSameSize(firstImage);\n  const resizedSecond = resizeToSameSize(secondImage);\n\n  return [\n    fillSizeDifference(resizedFirst, firstImageWidth, firstImageHeight),\n    fillSizeDifference(resizedSecond, secondImageWidth, secondImageHeight),\n  ];\n};\n\nexport const cleanupUnused = (rootPath: string) => {\n  glob\n    .sync(\"**/*.png\", {\n      cwd: rootPath,\n      ignore: \"node_modules/**/*\",\n    })\n    .forEach((pngPath) => {\n      const absolutePath = path.join(rootPath, pngPath);\n      if (\n        !wasScreenshotUsed(pngPath) &&\n        isImageGeneratedByPlugin(fs.readFileSync(absolutePath))\n      ) {\n        fs.unlinkSync(absolutePath);\n      }\n    });\n};\n","import fs from \"fs\";\nimport { PNG } from \"pngjs\";\nimport pixelmatch, { PixelmatchOptions } from \"pixelmatch\";\nimport moveFile from \"move-file\";\nimport path from \"path\";\nimport { FILE_SUFFIX, TASK } from \"./constants\";\nimport {\n  cleanupUnused,\n  alignImagesToSameSize,\n  scaleImageAndWrite,\n  isImageCurrentVersion,\n  writePNG,\n} from \"./image.utils\";\nimport {\n  generateScreenshotPath,\n  resetScreenshotNameCache,\n} from \"./screenshotPath.utils\";\nimport type { CompareImagesTaskReturn } from \"./types\";\n\nexport type CompareImagesCfg = {\n  scaleFactor: number;\n  title: string;\n  imgNew: string;\n  imgOld: string;\n  updateImages: boolean;\n  maxDiffThreshold: number;\n  diffConfig: PixelmatchOptions;\n};\n\nconst round = (n: number) => Math.ceil(n * 1000) / 1000;\n\nconst unlinkSyncSafe = (path: string) =>\n  fs.existsSync(path) && fs.unlinkSync(path);\nconst moveSyncSafe = (pathFrom: string, pathTo: string) =>\n  fs.existsSync(pathFrom) && moveFile.sync(pathFrom, pathTo);\n\nexport const getScreenshotPathInfoTask = (cfg: {\n  titleFromOptions: string;\n  imagesPath: string;\n  specPath: string;\n  currentRetryNumber: number;\n}) => {\n  const screenshotPath = generateScreenshotPath(cfg);\n\n  return { screenshotPath, title: path.basename(screenshotPath, \".png\") };\n};\n\nexport const cleanupImagesTask = (config: Cypress.PluginConfigOptions) => {\n  if (config.env[\"pluginVisualRegressionCleanupUnusedImages\"]) {\n    cleanupUnused(config.projectRoot);\n  }\n\n  resetScreenshotNameCache();\n\n  return null;\n};\n\nexport const approveImageTask = ({ img }: { img: string }) => {\n  const oldImg = img.replace(FILE_SUFFIX.actual, \"\");\n  unlinkSyncSafe(oldImg);\n\n  const diffImg = img.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff);\n  unlinkSyncSafe(diffImg);\n\n  moveSyncSafe(img, oldImg);\n\n  return null;\n};\n\nexport const compareImagesTask = async (\n  cfg: CompareImagesCfg\n): Promise<CompareImagesTaskReturn> => {\n  const messages = [] as string[];\n  const rawImgNewBuffer = await scaleImageAndWrite({\n    scaleFactor: cfg.scaleFactor,\n    path: cfg.imgNew,\n  });\n  let imgDiff: number | undefined;\n  let imgNewBase64: string, imgOldBase64: string, imgDiffBase64: string;\n  let error = false;\n\n  if (fs.existsSync(cfg.imgOld) && !cfg.updateImages) {\n    const rawImgNew = PNG.sync.read(rawImgNewBuffer);\n    const rawImgOldBuffer = fs.readFileSync(cfg.imgOld);\n    const rawImgOld = PNG.sync.read(rawImgOldBuffer);\n    const isImgSizeDifferent =\n      rawImgNew.height !== rawImgOld.height ||\n      rawImgNew.width !== rawImgOld.width;\n\n    const [imgNew, imgOld] = isImgSizeDifferent\n      ? alignImagesToSameSize(rawImgNew, rawImgOld)\n      : [rawImgNew, rawImgOld];\n\n    const { width, height } = imgNew;\n    const diff = new PNG({ width, height });\n    const diffConfig = Object.assign({ includeAA: true }, cfg.diffConfig);\n\n    const diffPixels = pixelmatch(\n      imgNew.data,\n      imgOld.data,\n      diff.data,\n      width,\n      height,\n      diffConfig\n    );\n    imgDiff = diffPixels / (width * height);\n\n    if (isImgSizeDifferent) {\n      messages.push(\n        `Warning: Images size mismatch - new screenshot is ${rawImgNew.width}px by ${rawImgNew.height}px while old one is ${rawImgOld.width}px by ${rawImgOld.height} (width x height).`\n      );\n    }\n\n    if (imgDiff > cfg.maxDiffThreshold) {\n      messages.unshift(\n        `Image diff factor (${round(\n          imgDiff\n        )}%) is bigger than maximum threshold option ${cfg.maxDiffThreshold}.`\n      );\n      error = true;\n    }\n\n    const diffBuffer = PNG.sync.write(diff);\n    imgNewBase64 = PNG.sync.write(imgNew).toString(\"base64\");\n    imgDiffBase64 = diffBuffer.toString(\"base64\");\n    imgOldBase64 = PNG.sync.write(imgOld).toString(\"base64\");\n\n    if (error) {\n      writePNG(\n        cfg.imgNew.replace(FILE_SUFFIX.actual, FILE_SUFFIX.diff),\n        diffBuffer\n      );\n      return {\n        error,\n        message: messages.join(\"\\n\"),\n        imgDiff,\n        imgNewBase64,\n        imgDiffBase64,\n        imgOldBase64,\n        maxDiffThreshold: cfg.maxDiffThreshold,\n      };\n    } else {\n      if (rawImgOld && !isImageCurrentVersion(rawImgOldBuffer)) {\n        writePNG(cfg.imgNew, rawImgNewBuffer);\n        moveFile.sync(cfg.imgNew, cfg.imgOld);\n      } else {\n        // don't overwrite file if it's the same (imgDiff < cfg.maxDiffThreshold && !isImgSizeDifferent)\n        fs.unlinkSync(cfg.imgNew);\n      }\n    }\n  } else {\n    // there is no \"old screenshot\" or screenshots should be immediately updated\n    imgDiff = 0;\n    imgNewBase64 = \"\";\n    imgDiffBase64 = \"\";\n    imgOldBase64 = \"\";\n    writePNG(cfg.imgNew, rawImgNewBuffer);\n    moveFile.sync(cfg.imgNew, cfg.imgOld);\n  }\n\n  if (typeof imgDiff !== \"undefined\") {\n    messages.unshift(\n      `Image diff factor (${round(\n        imgDiff\n      )}%) is within boundaries of maximum threshold option ${\n        cfg.maxDiffThreshold\n      }.`\n    );\n    return {\n      message: messages.join(\"\\n\"),\n      imgDiff,\n      imgNewBase64,\n      imgDiffBase64,\n      imgOldBase64,\n      maxDiffThreshold: cfg.maxDiffThreshold,\n    };\n  }\n\n  /* c8 ignore next */\n  return null;\n};\n\nexport const doesFileExistTask = ({ path }: { path: string }) =>\n  fs.existsSync(path);\n\n/* c8 ignore start */\nexport const initTaskHook = (config: Cypress.PluginConfigOptions) => ({\n  [TASK.getScreenshotPathInfo]: getScreenshotPathInfoTask,\n  [TASK.cleanupImages]: cleanupImagesTask.bind(undefined, config),\n  [TASK.doesFileExist]: doesFileExistTask,\n  [TASK.approveImage]: approveImageTask,\n  [TASK.compareImages]: compareImagesTask,\n});\n/* c8 ignore stop */\n","import path from \"path\";\nimport { promises as fs } from \"fs\";\nimport moveFile from \"move-file\";\nimport { IMAGE_SNAPSHOT_PREFIX, PATH_VARIABLES } from \"./constants\";\n\ntype NotFalsy<T> = T extends false | null | undefined ? never : T;\n\nconst MIMIC_ROOT_WIN_REGEX = new RegExp(\n  `^${PATH_VARIABLES.winSystemRootPath}\\\\${path.sep}([A-Z])\\\\${path.sep}`\n);\nconst MIMIC_ROOT_UNIX_REGEX = new RegExp(\n  `^${PATH_VARIABLES.unixSystemRootPath}\\\\${path.sep}`\n);\n\nconst getConfigVariableOrThrow = <K extends keyof Cypress.PluginConfigOptions>(\n  config: Cypress.PluginConfigOptions,\n  name: K\n) => {\n  if (config[name]) {\n    return config[name] as NotFalsy<Cypress.PluginConfigOptions[K]>;\n  }\n\n  /* c8 ignore start */\n  throw `[@frsource/cypress-plugin-visual-regression-diff] CypressConfig.${name} cannot be missing or \\`false\\`!`;\n};\n/* c8 ignore stop */\n\nexport const parseAbsolutePath = ({\n  screenshotPath,\n  projectRoot,\n}: {\n  screenshotPath: string;\n  projectRoot: string;\n}) => {\n  let newAbsolutePath: string;\n  const matchedMimicingWinRoot = screenshotPath.match(MIMIC_ROOT_WIN_REGEX);\n  const matchedMimicingUnixRoot = screenshotPath.match(MIMIC_ROOT_UNIX_REGEX);\n  if (matchedMimicingWinRoot && matchedMimicingWinRoot[1]) {\n    const driveLetter = matchedMimicingWinRoot[1];\n    newAbsolutePath = path.join(\n      `${driveLetter}:\\\\`,\n      screenshotPath.substring(matchedMimicingWinRoot[0].length)\n    );\n  } else if (matchedMimicingUnixRoot) {\n    newAbsolutePath =\n      path.sep + screenshotPath.substring(matchedMimicingUnixRoot[0].length);\n  } else {\n    newAbsolutePath = path.join(projectRoot, screenshotPath);\n  }\n  return path.normalize(newAbsolutePath);\n};\n\nexport const initAfterScreenshotHook =\n  (config: Cypress.PluginConfigOptions) =>\n  (\n    details: Cypress.ScreenshotDetails\n  ):\n    | void\n    | Cypress.AfterScreenshotReturnObject\n    | Promise<Cypress.AfterScreenshotReturnObject> => {\n    // it's not a screenshot generated by FRSOURCE Cypress Plugin Visual Regression Diff\n    /* c8 ignore start */\n    if (details.name?.indexOf(IMAGE_SNAPSHOT_PREFIX) !== 0) return;\n    /* c8 ignore stop */\n    const screenshotsFolder = getConfigVariableOrThrow(\n      config,\n      \"screenshotsFolder\"\n    );\n    const screenshotPath = details.name.substring(\n      IMAGE_SNAPSHOT_PREFIX.length + path.sep.length\n    );\n    const newAbsolutePath = parseAbsolutePath({\n      screenshotPath,\n      projectRoot: config.projectRoot,\n    });\n\n    return (async () => {\n      await moveFile(details.path, newAbsolutePath);\n      await fs.rm(path.join(screenshotsFolder, IMAGE_SNAPSHOT_PREFIX), {\n        recursive: true,\n        force: true,\n      });\n\n      return { path: newAbsolutePath };\n    })();\n  };\n","import { initTaskHook } from \"./task.hook\";\nimport { initAfterScreenshotHook } from \"./afterScreenshot.hook\";\n\n/* c8 ignore start */\nconst initForceDeviceScaleFactor = (on: Cypress.PluginEvents) => {\n  // based on https://github.com/cypress-io/cypress/issues/2102#issuecomment-521299946\n  on(\"before:browser:launch\", (browser, launchOptions) => {\n    if (browser.name === \"chrome\" || browser.name === \"chromium\") {\n      launchOptions.args.push(\"--force-device-scale-factor=1\");\n      launchOptions.args.push(\"--high-dpi-support=1\");\n    } else if (browser.name === \"electron\" && browser.isHeaded) {\n      // eslint-disable-next-line no-console\n      console.log(\n        \"There isn't currently a way of setting the device scale factor in Cypress when running headed electron so we disable the image regression commands.\"\n      );\n    }\n  });\n};\n/* c8 ignore stop */\n\nexport const initPlugin = (\n  on: Cypress.PluginEvents,\n  config: Cypress.PluginConfigOptions\n) => {\n  /* c8 ignore start */\n  if (config.env[\"pluginVisualRegressionForceDeviceScaleFactor\"] !== false) {\n    initForceDeviceScaleFactor(on);\n  }\n  /* c8 ignore stop */\n  on(\"task\", initTaskHook(config));\n  on(\"after:screenshot\", initAfterScreenshotHook(config));\n};\n"],"names":["PLUGIN_NAME","IMAGE_SNAPSHOT_PREFIX","FILE_SUFFIX","TASK","getScreenshotPathInfo","compareImages","approveImage","cleanupImages","doesFileExist","PATH_VARIABLES","specPath","unixSystemRootPath","winSystemRootPath","WINDOWS_LIKE_DRIVE_REGEX","METADATA_KEY","truncate","nameCacheCounter","lastRetryNameCacheCounter","lastRetryNumber","resetMap","map","key","generateScreenshotPath","titleFromOptions","imagesPath","currentRetryNumber","parsePathPartVariables","pathPart","i","path","dirname","test","join","screenshotPath","split","sanitize","actual","screenshotPathRegex","RegExp","diff","wasScreenshotUsed","imagePath","matched","match","numString","num","parseInt","isNaN","resetScreenshotNameCache","addPNGMetadata","png","addMetadata","version","getPNGMetadata","getMetadata","isImageCurrentVersion","isImageGeneratedByPlugin","writePNG","name","fs","writeFileSync","PNG","sync","write","inArea","x","y","height","width","fillSizeDifference","image","idx","data","createImageResizer","source","resized","fill","bitblt","scaleImageAndWrite","scaleFactor","imgBuffer","readFileSync","rawImgNew","read","newImageWidth","Math","ceil","newImageHeight","sharp","resize","toFile","alignImagesToSameSize","firstImage","secondImage","firstImageWidth","firstImageHeight","secondImageWidth","secondImageHeight","resizeToSameSize","max","resizedFirst","resizedSecond","cleanupUnused","rootPath","glob","cwd","ignore","forEach","pngPath","absolutePath","unlinkSync","round","n","unlinkSyncSafe","existsSync","moveSyncSafe","pathFrom","pathTo","moveFile","getScreenshotPathInfoTask","cfg","title","basename","cleanupImagesTask","config","env","projectRoot","approveImageTask","img","oldImg","replace","diffImg","compareImagesTask","messages","rawImgNewBuffer","imgNew","imgDiff","imgNewBase64","imgOldBase64","imgDiffBase64","error","imgOld","updateImages","rawImgOldBuffer","rawImgOld","isImgSizeDifferent","diffConfig","Object","assign","includeAA","diffPixels","pixelmatch","push","maxDiffThreshold","unshift","diffBuffer","toString","message","doesFileExistTask","initTaskHook","bind","undefined","MIMIC_ROOT_WIN_REGEX","sep","MIMIC_ROOT_UNIX_REGEX","getConfigVariableOrThrow","parseAbsolutePath","newAbsolutePath","matchedMimicingWinRoot","matchedMimicingUnixRoot","driveLetter","substring","length","normalize","initAfterScreenshotHook","details","indexOf","screenshotsFolder","rm","recursive","force","initForceDeviceScaleFactor","on","browser","launchOptions","args","isHeaded","console","log","initPlugin"],"mappings":"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"}